1. pom — зависимости, плагины, сборка и т.д.
   .gitignore — записываюся файлы, которые игнорируюся при сохранении
   mvnw/mvnw.cmd — конфигурационные файлы, позволяет запустить Maven-команды в проекте без глобальной установки Maven в системе
   mvnw — shell-скрипт для Linux/macOS
   mvnw.cmd — командный скрипт для Windows

2. resources — хранит конфигурационные файлы
      ⭣
   application.properties — конфиги для desktop (в нашем случае только для БД)

3. config — классы настройки для централизованного управления зависимостями,
            объявление бинов (DataSource, JdbcTemplate или EntityManager, пути к индексам Lucene и т.п.)

4. util — вспомогательные компоненты без сложной логики домена

   """config = «что и как подключаем и собираем» (параметры внешних сервисов)
      util = «чем облегчим себе жизнь» (функции для любых технических вспомогательных задач)"""

5. entity — чистые POJO-классы. объекты, с которыми надо работать
               "отражают структуру данных"

6. dao — работает непосредственно с базой данных (запись, чтиние, удаление и т.д.)
               "скрывают детали SQL"

7. service — реализует бизнес-логику
               "здесь «собираются» use-cases: связываются DAO, PDF-парсер, индексатор и т.п."

8. index — всё, что касается Lucene-индекса
               "отдельно вынесенная логика полнотекстового индексирования"

9. ui — интерфейс
      ⭣
      ResourceManagerApp — точка входа (инициализация фреймворка UI, связывание контроллеров и сервисов).
      ⭣
      controller — обработчики событий от GUI
      (Через контроллеры отправляются команды в service и получает данные для показа)


                                     <!-- Для дальнейшего -->
                   *exception (или error), где держать свои unchecked-исключения

                   *scheduler (если нужна периодическая проверка новых совпадений)

                   *test-пакеты (unit и интеграционные тесты для каждого слоя)


лично для меня строка запуска
& "C:\Tools\apache-maven-3.9.10\bin\mvn.cmd" clean javafx:run




-- 1) Таблица «живых» файлов
CREATE TABLE files (
  uuid         UUID        PRIMARY KEY DEFAULT gen_random_uuid(),               -- уникальный идентификатор
  orig_name    TEXT        NOT NULL,                  -- оригинальное имя файла
  type         TEXT        NOT NULL,                  -- pdf, docx, link, excel…
  size_bytes   BIGINT      NOT NULL,                  -- размер в байтах
  added_at     TIMESTAMP   NOT NULL DEFAULT NOW(),    -- когда добавлен
  updated_at   TIMESTAMP   NOT NULL DEFAULT NOW()     -- когда метаданные обновлены
);

-- 2) Таблица «мусорки»
CREATE TABLE files_trash (
  uuid         UUID        PRIMARY KEY,               -- тот же UUID
  orig_name    TEXT        NOT NULL,
  type         TEXT        NOT NULL,
  size_bytes   BIGINT      NOT NULL,
  added_at     TIMESTAMP   NOT NULL,                  -- дата изначального добавления
  updated_at   TIMESTAMP   NOT NULL,                  -- дата последнего изменения до удаления
  deleted_at   TIMESTAMP   NOT NULL DEFAULT NOW()     -- когда переместили в корзину
);
