1. pom — зависимости, плагины, сборка и т.д.
   .gitignore — записываюся файлы, которые игнорируюся при сохранении
   mvnw/mvnw.cmd — конфигурационные файлы, позволяет запустить Maven-команды в проекте без глобальной установки Maven в системе
   mvnw — shell-скрипт для Linux/macOS
   mvnw.cmd — командный скрипт для Windows

2. resources — хранит конфигурационные файлы
      ⭣
   application.properties — конфиги для desktop (в нашем случае только для БД)

3. config — классы настройки для централизованного управления зависимостями,
            объявление бинов (DataSource, JdbcTemplate или EntityManager, пути к индексам Lucene и т.п.)

4. util — вспомогательные компоненты без сложной логики домена

   """config = «что и как подключаем и собираем» (параметры внешних сервисов)
      util = «чем облегчим себе жизнь» (функции для любых технических вспомогательных задач)"""

5. entity — чистые POJO-классы. объекты, с которыми надо работать
               "отражают структуру данных"

6. dao — работает непосредственно с базой данных (запись, чтиние, удаление и т.д.)
               "скрывают детали SQL"

7. service — реализует бизнес-логику
               "здесь «собираются» use-cases: связываются DAO, PDF-парсер, индексатор и т.п."

8. index — всё, что касается Lucene-индекса
               "отдельно вынесенная логика полнотекстового индексирования"

9. ui — интерфейс
      ⭣
      ResourceManagerApp — точка входа (инициализация фреймворка UI, связывание контроллеров и сервисов).
      ⭣
      controller — обработчики событий от GUI
      (Через контроллеры отправляются команды в service и получает данные для показа)


                                     <!-- Для дальнейшего -->
                   *exception (или error), где держать свои unchecked-исключения

                   *scheduler (если нужна периодическая проверка новых совпадений)

                   *test-пакеты (unit и интеграционные тесты для каждого слоя)


лично для меня строка запуска
& "C:\Tools\apache-maven-3.9.10\bin\mvn.cmd" clean javafx:run

cd F:\MainProjDataDirection\Main\Resource-Course

& 'C:\Program Files\PostgreSQL\17\bin\psql.exe' -U postgres -l

& 'C:\Program Files\PostgreSQL\17\bin\psql.exe' -U postgres -d demo



-- 1) Таблица «живых» файлов
CREATE TABLE files (
    uuid         UUID      PRIMARY KEY DEFAULT gen_random_uuid(),  -- уникальный идентификатор
    storage_key  TEXT      NOT NULL,                              -- относительный путь/ключ в репозитории
    orig_name    TEXT      NOT NULL,                              -- оригинальное имя файла
    type         TEXT      NOT NULL,                              -- pdf, docx, link, excel…
    size_bytes   BIGINT    NOT NULL,                              -- размер в байтах
    added_at     TIMESTAMP NOT NULL DEFAULT NOW()                 -- когда добавлен
);

-- 2) Таблица «дополнительных метаданных» с полями: updated_at, pinned, tag, additional_info
CREATE TABLE file_metadata (
    file_uuid        UUID      PRIMARY KEY
                                REFERENCES files(uuid)
                                ON DELETE CASCADE,               -- связь «один-к-одному»
    updated_at       TIMESTAMP NOT NULL DEFAULT NOW(),           -- когда метаданные были обновлены
    pinned           BOOLEAN   NOT NULL DEFAULT FALSE,           -- флаг «закреплён»
    tag              TEXT,                                        -- тег
    additional_info  TEXT                                         -- произвольная доп. информация
);

-- 3) Таблица «корзины» для базовой информации о файле
CREATE TABLE files_trash (
    uuid         UUID      PRIMARY KEY,             -- тот же UUID, что и в files
    storage_key  TEXT      NOT NULL,                -- относительный путь/ключ
    orig_name    TEXT      NOT NULL,                -- оригинальное имя
    type         TEXT      NOT NULL,                -- pdf, docx, link…
    size_bytes   BIGINT    NOT NULL,                -- размер в байтах
    added_at     TIMESTAMP NOT NULL,                -- дата изначального добавления
    deleted_at   TIMESTAMP NOT NULL DEFAULT NOW()   -- когда переместили в корзину
);

-- 4) Таблица «метаданных корзины» (аналог file_metadata)
CREATE TABLE file_metadata_trash (
    file_uuid       UUID      PRIMARY KEY
                                 REFERENCES files_trash(uuid)
                                 ON DELETE CASCADE,     -- связь «один-к-одному» с files_trash
    updated_at      TIMESTAMP NOT NULL,             -- когда метаданные были в последний раз до удаления
    pinned          BOOLEAN   NOT NULL DEFAULT FALSE, -- флаг «закреплён»
    tag             TEXT,                             -- тег
    additional_info TEXT                              -- доп. информация
);

-- Функция для авто-обновления поля updated_at в file_metadata
CREATE OR REPLACE FUNCTION touch_file_metadata_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at := NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Триггер, который вызывает функцию перед любым UPDATE
CREATE TRIGGER trg_touch_file_metadata
    BEFORE UPDATE ON file_metadata
    FOR EACH ROW
    EXECUTE FUNCTION touch_file_metadata_updated_at();

-- Индексы для ускорения поиска по тегам и фильтрации по «закреплённым»
CREATE INDEX IF NOT EXISTS idx_file_metadata_tag
    ON file_metadata(tag);

CREATE INDEX IF NOT EXISTS idx_file_metadata_pinned
    ON file_metadata(pinned);

